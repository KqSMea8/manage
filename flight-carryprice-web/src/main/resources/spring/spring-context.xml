<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
	default-autowire="byName" default-lazy-init="true">
	
	
	<!-- 属性文件 -->
	<bean id="propertyConfigurer" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<!-- 为集成安全部配置文件加解密组件, 需在项目中所有的PropertySourcesPlaceholderConfigurer配置上ignoreUnresolveablePlaceholders为true -->
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>

				<value>classpath:config.properties</value>
			</list>
		</property>
		<!-- 为集成安全部配置文件加解密组件, 将所有引用了important.properties文件的PropertyPlaceholder改造成PropertyFactoryBean + PropertySourcesPlaceholderConfigurer的形式 -->
		<property name="properties" ref="secApplicationProperties"/>
	</bean>


	<bean id="secApplicationProperties" class="com.jd.security.configsec.spring.config.JDSecurityPropertyFactoryBean">
		<property name="ignoreResourceNotFound" value="true" />
		<!-- 为集成安全部配置文件加解密组件, 需将important.properties文件配置在secLocation中, 并去除locations中的important.properties-->
		<property name="secLocation" value="classpath:important.properties"/><!-- 不能使用classpath*: -->
	</bean>

	<!-- 数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driverClass}"/>
		
		<property name="url" value="${jdbc.jdbcUrl}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialPoolSize}" />
		<property name="minIdle" value="${jdbc.minPoolSize}" />
		<property name="maxActive" value="${jdbc.maxPoolSize}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.checkoutTimeout}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小  mysql5.6以上支持-->
		<!-- 	    <property name="poolPreparedStatements" value="true" />   -->
		<!--
			<property name="maxPoolPreparedStatementPerConnectionSize" value="20"
			/>
		-->

		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
<!-- 		<property name="filters" value="stat" /> -->
	</bean>
	
	<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 启用注解式事务 -->
	<tx:annotation-driven/>

	<!-- 自动扫描组件，这里要把controler下面的 controller去除，他们是在spring3-servlet.xml中配置的，如果不去除会影响事务管理的。 -->
	<context:component-scan base-package="com.flight">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="taskExecutor" name="taskExecutor"
		  class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 线程池维护线程的最少数量 -->
		<property name="corePoolSize" value="10"/>
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="200"/>
		<!-- 线程池所使用的缓冲队列 -->
		<property name="queueCapacity" value="100"/>
		<!-- 线程池对拒绝任务(无线程可用)的处理策略 ThreadPoolExecutor.CallerRunsPolicy策略 ,调用者的线程会执行该任务,如果执行器已关闭,则丢弃.  -->
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
		</property>
	</bean>

	<!-- mybatis sqlsessionFactory -->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="configLocation" value="classpath:mybatis-config.xml" /> 
		<property name="mapperLocations">
			<array>
				<value>classpath:com/flight/carryprice/mapper/xml/*.xml</value>
			</array>
        </property>
        <property name="dataSource" ref="dataSource" />
        <property name="plugins">
		    <array>
			      <bean class="com.github.pagehelper.PageHelper">
			        <property name="properties">
			          <value>
<!-- 			            dialect=Oracle -->
			            dialect=mysql
			          </value>
			        </property>
			      </bean>
		    </array>
  		</property>
        
    </bean>
	
	<!-- mybatis mapper 扫描注入 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.flight.carryprice.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sessionFactory" />
		<property name="properties">
	        <value>
	            mappers=tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.MySqlMapper
	        </value>
	    </property>
	</bean>
	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>
	<!-- 京东ES配置开始 -->
	<bean id="selfWorkerOrderTxtConfig" class="com.jd.es.client.domain.config.ESConfig">
		<property name="domainUrl" value="${jipiao.es.config.domain}" />
		<property name="index" value="${jipiao.es.interface.index}" />
		<property name="type" value="${jipiao.es.refund.type}" />
		<property name="timeout" value="${jipiao.es.timeout}" />
	</bean>
	<bean id="selfWorkerOrderTxtClient" class="com.jd.es.client.ESClientTemplate">
		<property name="esConfig" ref="selfWorkerOrderTxtConfig" />
	</bean>
	<!-- jdCacheUtils-bigen -->
	<bean id="jimdbConfigClient" class="com.jd.jim.cli.config.client.ConfigLongPollingClientFactoryBean">
		<property name="serviceEndpoint" value="${jimdb.config.serviceEndpoint}"></property>
	</bean>
	<bean id="jimdbClient" class="com.jd.jim.cli.ReloadableJimClientFactoryBean">
		<property name="configClient" ref="jimdbConfigClient" />
		<property name="jimUrl" value="${jimdb.config.jimurl}" />
	</bean>

	<bean id="jdCacheUtils" class="com.flight.carryprice.service.impl.JdCacheImplUtils">
		<property name="jimdbClient" ref="jimdbClient" />
	</bean>

	<!-- ump 告警 -->
	<import resource="spring-config-ump.xml"/>
	
	<!--<import resource="spring-config-jsf-consumer.xml"/>-->
	<!--配置参数-->
	<import resource="spring-config-util.xml" />
	<!-- 安全日志 -->
	<import resource="spring-config-security-log.xml"/>

	
</beans>